/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PrivacyCrowdfunding {
  export type CampaignStruct = {
    id: BigNumberish;
    creator: AddressLike;
    title: string;
    description: string;
    category: string;
    goal: BigNumberish;
    raised: BigNumberish;
    deadline: BigNumberish;
    isActive: boolean;
    goalReached: boolean;
    fundsWithdrawn: boolean;
  };

  export type CampaignStructOutput = [
    id: bigint,
    creator: string,
    title: string,
    description: string,
    category: string,
    goal: bigint,
    raised: bigint,
    deadline: bigint,
    isActive: boolean,
    goalReached: boolean,
    fundsWithdrawn: boolean
  ] & {
    id: bigint;
    creator: string;
    title: string;
    description: string;
    category: string;
    goal: bigint;
    raised: bigint;
    deadline: bigint;
    isActive: boolean;
    goalReached: boolean;
    fundsWithdrawn: boolean;
  };

  export type DonationStruct = {
    campaignId: BigNumberish;
    donor: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    isAnonymous: boolean;
  };

  export type DonationStructOutput = [
    campaignId: bigint,
    donor: string,
    amount: bigint,
    timestamp: bigint,
    isAnonymous: boolean
  ] & {
    campaignId: bigint;
    donor: string;
    amount: bigint;
    timestamp: bigint;
    isAnonymous: boolean;
  };
}

export interface PrivacyCrowdfundingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaignCounter"
      | "campaignDonations"
      | "campaigns"
      | "createCampaign"
      | "donate"
      | "emergencyPause"
      | "getAllActiveCampaigns"
      | "getCampaign"
      | "getCampaignDonations"
      | "getCampaignsByCategory"
      | "getContractStats"
      | "getUserCampaigns"
      | "getUserDonations"
      | "platformFee"
      | "refund"
      | "totalCampaigns"
      | "totalDonations"
      | "userCampaigns"
      | "userDonations"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "DonationMade"
      | "FundsWithdrawn"
      | "RefundIssued"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "campaignCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignDonations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignDonations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsByCategory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCampaigns",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDonations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userCampaigns",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDonations",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "campaignCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    creator: AddressLike,
    title: string,
    goal: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    creator: string,
    title: string,
    goal: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    creator: string;
    title: string;
    goal: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationMadeEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    donor: AddressLike,
    amount: BigNumberish,
    isAnonymous: boolean
  ];
  export type OutputTuple = [
    campaignId: bigint,
    donor: string,
    amount: bigint,
    isAnonymous: boolean
  ];
  export interface OutputObject {
    campaignId: bigint;
    donor: string;
    amount: bigint;
    isAnonymous: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    creator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    creator: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    creator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundIssuedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    donor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [campaignId: bigint, donor: string, amount: bigint];
  export interface OutputObject {
    campaignId: bigint;
    donor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivacyCrowdfunding extends BaseContract {
  connect(runner?: ContractRunner | null): PrivacyCrowdfunding;
  waitForDeployment(): Promise<this>;

  interface: PrivacyCrowdfundingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaignCounter: TypedContractMethod<[], [bigint], "view">;

  campaignDonations: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        campaignId: bigint;
        donor: string;
        amount: bigint;
        timestamp: bigint;
        isAnonymous: boolean;
      }
    ],
    "view"
  >;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        category: string;
        goal: bigint;
        raised: bigint;
        deadline: bigint;
        isActive: boolean;
        goalReached: boolean;
        fundsWithdrawn: boolean;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _category: string,
      _goal: BigNumberish,
      _durationDays: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  donate: TypedContractMethod<
    [_campaignId: BigNumberish, _isAnonymous: boolean],
    [void],
    "payable"
  >;

  emergencyPause: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllActiveCampaigns: TypedContractMethod<
    [],
    [PrivacyCrowdfunding.CampaignStructOutput[]],
    "view"
  >;

  getCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [PrivacyCrowdfunding.CampaignStructOutput],
    "view"
  >;

  getCampaignDonations: TypedContractMethod<
    [_campaignId: BigNumberish],
    [PrivacyCrowdfunding.DonationStructOutput[]],
    "view"
  >;

  getCampaignsByCategory: TypedContractMethod<
    [_category: string],
    [PrivacyCrowdfunding.CampaignStructOutput[]],
    "view"
  >;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _totalCampaigns: bigint;
        _totalDonations: bigint;
        _platformFee: bigint;
      }
    ],
    "view"
  >;

  getUserCampaigns: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserDonations: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  refund: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalCampaigns: TypedContractMethod<[], [bigint], "view">;

  totalDonations: TypedContractMethod<[], [bigint], "view">;

  userCampaigns: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userDonations: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawFunds: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaignCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignDonations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        campaignId: bigint;
        donor: string;
        amount: bigint;
        timestamp: bigint;
        isAnonymous: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        category: string;
        goal: bigint;
        raised: bigint;
        deadline: bigint;
        isActive: boolean;
        goalReached: boolean;
        fundsWithdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _category: string,
      _goal: BigNumberish,
      _durationDays: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _isAnonymous: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllActiveCampaigns"
  ): TypedContractMethod<
    [],
    [PrivacyCrowdfunding.CampaignStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [PrivacyCrowdfunding.CampaignStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignDonations"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [PrivacyCrowdfunding.DonationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignsByCategory"
  ): TypedContractMethod<
    [_category: string],
    [PrivacyCrowdfunding.CampaignStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _totalCampaigns: bigint;
        _totalDonations: bigint;
        _platformFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCampaigns"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserDonations"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalCampaigns"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDonations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userCampaigns"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userDonations"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DonationMade"
  ): TypedContractEvent<
    DonationMadeEvent.InputTuple,
    DonationMadeEvent.OutputTuple,
    DonationMadeEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RefundIssued"
  ): TypedContractEvent<
    RefundIssuedEvent.InputTuple,
    RefundIssuedEvent.OutputTuple,
    RefundIssuedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "DonationMade(uint256,address,uint256,bool)": TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;
    DonationMade: TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;

    "FundsWithdrawn(uint256,address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "RefundIssued(uint256,address,uint256)": TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
    RefundIssued: TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
  };
}
