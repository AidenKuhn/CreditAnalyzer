/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CreditAnalyzerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "creditEvaluations"
      | "creditSubmissions"
      | "evaluateCreditScore"
      | "getEncryptedCreditScore"
      | "getEncryptedLoanApproval"
      | "getEvaluationStats"
      | "hasSubmittedCreditData"
      | "isCreditEvaluated"
      | "owner"
      | "requestLoanApproval"
      | "submitCreditData"
      | "totalEvaluations"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreditDataSubmitted"
      | "CreditEvaluated"
      | "LoanApprovalRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "creditEvaluations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditSubmissions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateCreditScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedCreditScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedLoanApproval",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvaluationStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubmittedCreditData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditEvaluated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestLoanApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitCreditData",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEvaluations",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "creditEvaluations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluateCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedLoanApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEvaluationStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubmittedCreditData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreditEvaluated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestLoanApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitCreditData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEvaluations",
    data: BytesLike
  ): Result;
}

export namespace CreditDataSubmittedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditEvaluatedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanApprovalRequestedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreditAnalyzer extends BaseContract {
  connect(runner?: ContractRunner | null): CreditAnalyzer;
  waitForDeployment(): Promise<this>;

  interface: CreditAnalyzerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  creditEvaluations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint, string] & {
        encryptedScore: string;
        isEvaluated: boolean;
        evaluationTime: bigint;
        isApproved: string;
      }
    ],
    "view"
  >;

  creditSubmissions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, string, boolean, bigint] & {
        encryptedIncome: string;
        encryptedDebt: string;
        encryptedAge: string;
        encryptedCreditHistory: string;
        encryptedPaymentHistory: string;
        hasSubmitted: boolean;
        submissionTime: bigint;
      }
    ],
    "view"
  >;

  evaluateCreditScore: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  getEncryptedCreditScore: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getEncryptedLoanApproval: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getEvaluationStats: TypedContractMethod<[], [bigint], "view">;

  hasSubmittedCreditData: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  isCreditEvaluated: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  requestLoanApproval: TypedContractMethod<[], [void], "nonpayable">;

  submitCreditData: TypedContractMethod<
    [
      _encryptedIncome: BytesLike,
      _encryptedDebt: BytesLike,
      _encryptedAge: BytesLike,
      _encryptedCreditHistory: BytesLike,
      _encryptedPaymentHistory: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  totalEvaluations: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "creditEvaluations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint, string] & {
        encryptedScore: string;
        isEvaluated: boolean;
        evaluationTime: bigint;
        isApproved: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "creditSubmissions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, string, boolean, bigint] & {
        encryptedIncome: string;
        encryptedDebt: string;
        encryptedAge: string;
        encryptedCreditHistory: string;
        encryptedPaymentHistory: string;
        hasSubmitted: boolean;
        submissionTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "evaluateCreditScore"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEncryptedCreditScore"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedLoanApproval"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEvaluationStats"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasSubmittedCreditData"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCreditEvaluated"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestLoanApproval"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitCreditData"
  ): TypedContractMethod<
    [
      _encryptedIncome: BytesLike,
      _encryptedDebt: BytesLike,
      _encryptedAge: BytesLike,
      _encryptedCreditHistory: BytesLike,
      _encryptedPaymentHistory: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalEvaluations"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CreditDataSubmitted"
  ): TypedContractEvent<
    CreditDataSubmittedEvent.InputTuple,
    CreditDataSubmittedEvent.OutputTuple,
    CreditDataSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "CreditEvaluated"
  ): TypedContractEvent<
    CreditEvaluatedEvent.InputTuple,
    CreditEvaluatedEvent.OutputTuple,
    CreditEvaluatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanApprovalRequested"
  ): TypedContractEvent<
    LoanApprovalRequestedEvent.InputTuple,
    LoanApprovalRequestedEvent.OutputTuple,
    LoanApprovalRequestedEvent.OutputObject
  >;

  filters: {
    "CreditDataSubmitted(address,uint256)": TypedContractEvent<
      CreditDataSubmittedEvent.InputTuple,
      CreditDataSubmittedEvent.OutputTuple,
      CreditDataSubmittedEvent.OutputObject
    >;
    CreditDataSubmitted: TypedContractEvent<
      CreditDataSubmittedEvent.InputTuple,
      CreditDataSubmittedEvent.OutputTuple,
      CreditDataSubmittedEvent.OutputObject
    >;

    "CreditEvaluated(address,uint256)": TypedContractEvent<
      CreditEvaluatedEvent.InputTuple,
      CreditEvaluatedEvent.OutputTuple,
      CreditEvaluatedEvent.OutputObject
    >;
    CreditEvaluated: TypedContractEvent<
      CreditEvaluatedEvent.InputTuple,
      CreditEvaluatedEvent.OutputTuple,
      CreditEvaluatedEvent.OutputObject
    >;

    "LoanApprovalRequested(address,uint256)": TypedContractEvent<
      LoanApprovalRequestedEvent.InputTuple,
      LoanApprovalRequestedEvent.OutputTuple,
      LoanApprovalRequestedEvent.OutputObject
    >;
    LoanApprovalRequested: TypedContractEvent<
      LoanApprovalRequestedEvent.InputTuple,
      LoanApprovalRequestedEvent.OutputTuple,
      LoanApprovalRequestedEvent.OutputObject
    >;
  };
}
